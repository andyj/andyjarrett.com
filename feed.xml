<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xml:base="https://www.andyjarrett.com//" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AndyJarrett.com</title>
    <link>https://www.andyjarrett.com//</link>
    <description>Posts about web app development</description>
    <language>en</language>
    <atom:link href="https://www.andyjarrett.com//feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NGINX redirect loops with SSL and CloudFlare</title>
      <link>https://www.andyjarrett.com/posts/2024/nginx-redirect-loops-with-ssl-and-cloudflare/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/chuttersnap-9AqIdzEc9pY-unsplash.jpg&quot; alt=&quot;Clouds&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@chuttersnap?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;CHUTTERSNAP&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/blue-clouds-under-white-sky-9AqIdzEc9pY?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

I&#39;ve been having trouble with my andyjarrett.com domain (though not my .co.uk one?) and redirection issues. Sometimes it would affect the browser, sometimes it wouldn&#39;t. Well last night was the last time its happening. So this is there I was

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl https://www.andyjarrett.com
&amp;lt;html&gt;
&amp;lt;head&gt;&amp;lt;title&gt;307 Temporary Redirect&amp;lt;/title&gt;&amp;lt;/head&gt;
&amp;lt;body&gt;
&amp;lt;center&gt;&amp;lt;h1&gt;307 Temporary Redirect&amp;lt;/h1&gt;&amp;lt;/center&gt;
&amp;lt;hr&gt;&amp;lt;center&gt;nginx/1.18.0 (Ubuntu)&amp;lt;/center&gt;
&amp;lt;/body&gt;
&amp;lt;/html&gt; &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I dived deeper in to it with &lt;code&gt;curl -L https://www.andyjarrett.com&lt;/code&gt; I got this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl: (47) Maximum (50) redirects followed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Didn&#39;t really help, so next on to the logs &lt;code&gt;sudo tail -f /var/log/nginx/error.log&lt;/code&gt; which didn&#39;t tell me much but did highlight headers like &lt;code&gt;CF-RAY&lt;/code&gt;, &lt;code&gt;CF-Visitor&lt;/code&gt;, and &lt;code&gt;CDN-Loop&lt;/code&gt;. Now I&#39;m thinking Cloudflare might be the cause of the redirection loop, especially if there&#39;s a mismatch between how Cloudflare is configured to handle SSL and how my server is handling it. Finally I got to CloudFlare &gt; Domain (andyjarrett.com) &gt; SSL/TLS &gt; Overview and &quot;SSL/TLS encryption&quot;. &lt;/p&gt;

&lt;div class=&quot;alert alert-success&quot;&gt;
&lt;strong&gt;Solution: Ensure that Cloudflare is set to &quot;Full&quot; or &quot;Full (Strict)&quot; mode for SSL.&lt;/strong&gt;
&lt;/div&gt;

&lt;p class=&quot;text-center&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/img/nginx-redirect-loops-with-ssl-and-cloudflare.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;Why?&lt;/strong&gt; Mine was originall set as &quot;Flexible,&quot; causing Cloudflare to make a HTTP requests to my server and causing the loop.
  From what I&#39;ve learnt
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;My Nginx server is configured to redirect all HTTP requests to HTTPS (i.e., redirect port 80 traffic to port 443).&lt;/li&gt;
  &lt;li&gt;When Cloudflare operates in Flexible mode, it connects to my server via HTTP (port 80), because it assumes the server doesn&#39;t support HTTPS.&lt;/li&gt;
  &lt;li&gt;When my server sees this incoming HTTP request, it triggers the redirection to HTTPS.&lt;/li&gt;
  &lt;li&gt;Cloudflare receives the redirect response and tries to establish an HTTPS connection with my server again, but still over HTTP due to &quot;Flexible&quot; mode.&lt;/li&gt;
  &lt;li&gt;This creates a loop: Cloudflare keeps making HTTP requests to my server, and my server keeps redirecting them to HTTPS.&lt;/li&gt;
&lt;/ol&gt;




]]></description>
      <pubDate>Wed, 21 Aug 2024 10:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/nginx-redirect-loops-with-ssl-and-cloudflare/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/chuttersnap-9AqIdzEc9pY-unsplash.jpg" type="image/jpeg" />
      <category>posts, nginx, cloudflare, loop, redirect, ssl</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>How to Instantly Index Your Website with IndexNow Using a Bash Script</title>
      <link>https://www.andyjarrett.com/posts/2024/how-to-instantly-index-your-website-with-indexnow-using-a-bash-script/</link>
      <description><![CDATA[


&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/gabriel-heinzer-4Mw7nkQDByk-unsplash.jpg&quot; alt=&quot;Developer debugging&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@6heinz3r?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Gabriel Heinzer&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/text-4Mw7nkQDByk?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;p&gt;If you’re looking to ensure that your website’s content is indexed by search engines as quickly as possible, &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://www.bing.com/indexnow&quot; target=&quot;_blank&quot;&gt;IndexNow&lt;/a&gt; is another tool to add to your toolbelt. Below, is my bash script helped me get started quickly with IndexNow. Afterwards, I’ll break down what each part of the script does and what it does, along with how to create and execute the script.&lt;/p&gt;

&lt;h2&gt;The Script&lt;/h2&gt;

&lt;p&gt;Let’s start with the script that automates the process of submitting a URL to be indexed via the IndexNow protocol.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Constants for example.com
HOST=&quot;example.com&quot;
KEY=&quot;your_unique_key_here&quot;
KEY_LOCATION=&quot;https://example.com/your_unique_key_here.txt&quot;

# Check if the URL path is passed as an argument
if [ -z &quot;$1&quot; ]; then
  echo &quot;Usage: $0 &lt;url_path&gt;&quot;
  exit 1
fi

# Assign the first argument to a variable
URL_PATH=&quot;$1&quot;

# Submit URL list for example.com
curl -X POST &quot;https://api.indexnow.org/indexnow&quot; &#92;
  -H &quot;Content-Type: application/json; charset=utf-8&quot; &#92;
  -d &quot;{
    &#92;&quot;host&#92;&quot;: &#92;&quot;$HOST&#92;&quot;,
    &#92;&quot;key&#92;&quot;: &#92;&quot;$KEY&#92;&quot;,
    &#92;&quot;keyLocation&#92;&quot;: &#92;&quot;$KEY_LOCATION&#92;&quot;,
    &#92;&quot;urlList&#92;&quot;: [
      &#92;&quot;https://$HOST$URL_PATH&#92;&quot;
    ]
  }&quot;&lt;/url_path&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;How to Create and Execute the Script&lt;/h2&gt;

&lt;h3&gt;Step 1: Create the Script&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Open your text editor:&lt;/strong&gt; You can use any text editor like Nano, Vim, or even Visual Studio Code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Copy the script:&lt;/strong&gt; Copy the bash script provided above.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Save the script:&lt;/strong&gt; Save the file with a &lt;code&gt;.sh&lt;/code&gt; extension, for example, &lt;code&gt;indexnow_submit.sh&lt;/code&gt;.&lt;/li&gt;
  &lt;pre&gt;&lt;code&gt;nano indexnow_submit.sh&lt;/code&gt;&lt;/pre&gt;
  &lt;li&gt;&lt;strong&gt;Make the script executable:&lt;/strong&gt; Before you can run the script, you need to give it execute permissions.&lt;/li&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chmod +x indexnow_submit.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/ol&gt;

&lt;h3&gt;Step 2: Execute the Script&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Run the script:&lt;/strong&gt; To use the script, open your terminal, navigate to the directory where your script is saved, and execute it by providing the path to the URL you want to index.&lt;/li&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./indexnow_submit.sh /path-to-your-page&lt;/code&gt;&lt;/pre&gt;
  &lt;li&gt;&lt;strong&gt;Example command:&lt;/strong&gt; If you want to index a page located at &lt;code&gt;https://example.com/blog/my-latest-post&lt;/code&gt;, you would run:&lt;/li&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;./indexnow_submit.sh /blog/my-latest-post&lt;/code&gt;&lt;/pre&gt;
&lt;/ol&gt;

&lt;p&gt;This will prompt the IndexNow API to index the specified URL immediately.&lt;/p&gt;

&lt;h2&gt;Breaking Down the Script&lt;/h2&gt;

&lt;p&gt;Now that you’ve seen the script and know how to run it, let’s dive into what each part does and why it’s important.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Setting Up Constants:&lt;/strong&gt; At the top of the script, we define some constants. These include the domain of your website (&lt;code&gt;HOST&lt;/code&gt;), the IndexNow key (&lt;code&gt;KEY&lt;/code&gt;), and the location where this key is hosted (&lt;code&gt;KEY_LOCATION&lt;/code&gt;). These are essential for the search engines to verify your site and the URLs you submit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Checking for a URL Path:&lt;/strong&gt; The script checks if you’ve provided a URL path as an argument when running the script. If you forget to include a URL path, the script will prompt you and exit. This step is crucial for ensuring that you don’t accidentally run the script without specifying which URL you want to index.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Submitting the URL:&lt;/strong&gt; The heart of the script is the &lt;code&gt;curl&lt;/code&gt; command, which sends a POST request to the IndexNow API. This command submits a JSON payload that includes your site’s details and the URL you want indexed. The search engines will then use this information to quickly index the specified URL.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;What is IndexNow?&lt;/h2&gt;

&lt;p&gt;Having seen the script in action, it’s helpful to understand a bit more about what IndexNow is and why you might want to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IndexNow&lt;/strong&gt; is a protocol that allows website owners to notify search engines immediately when content on their site is updated. Instead of waiting for search engines to crawl your site periodically, IndexNow lets you proactively inform them about changes, ensuring that your content is indexed much faster.&lt;/p&gt;

&lt;h2&gt;Why Use IndexNow?&lt;/h2&gt;

&lt;p&gt;There are several benefits to using IndexNow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; Instant indexing of new or updated content can be critical, especially for news or time-sensitive posts.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt; It reduces unnecessary server load by cutting down on the frequency of search engine crawls.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SEO Advantage:&lt;/strong&gt; Faster indexing can lead to quicker visibility in search results, potentially driving more traffic to your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Setting Up Your IndexNow Key&lt;/h2&gt;

&lt;p&gt;To use IndexNow, you’ll need to generate and host a key that validates your submissions.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Generate Your Key:&lt;/strong&gt; Visit the &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://www.indexnow.org/&quot;&gt;IndexNow Key Generation page&lt;/a&gt; and create your unique key.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Host the Key:&lt;/strong&gt; Save the key as a text file and upload it to the root directory of your website. For example:&lt;/li&gt;
  &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;https://example.com/your_unique_key_here.txt&lt;/code&gt;&lt;/pre&gt;
  &lt;li&gt;&lt;strong&gt;Verify:&lt;/strong&gt; Ensure the key file is accessible via the URL.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Starting with a practical script and then delving into the details can make it easier for you to implement IndexNow on your site. By using this simple bash script, you can ensure that your content gets indexed promptly, giving you a potential edge in search engine visibility.&lt;/p&gt;

&lt;p&gt;If you want to make sure your content is seen as soon as it’s published, IndexNow is a great tool to have in your SEO toolkit.&lt;/p&gt;

]]></description>
      <pubDate>Wed, 21 Aug 2024 22:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/how-to-instantly-index-your-website-with-indexnow-using-a-bash-script/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/gabriel-heinzer-4Mw7nkQDByk-unsplash.jpg" type="image/jpeg" />
      <category>posts, seo, indexnow, bash, script</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Reclaiming Space on macOS from Docker by Pruning Docker.raw</title>
      <link>https://www.andyjarrett.com/posts/2024/reclaiming-space-on-macos-from-docker-by-pruning-docker-raw/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/nathan-cima-2JNNpq4nGls-unsplash.jpg&quot; alt=&quot;Developer debugging&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@nathan_cima?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Nathan Cima&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/a-large-ship-in-the-water-2JNNpq4nGls?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;p&gt;Docker on macOS stores its container data in a virtual disk file called &lt;code&gt;Docker.raw&lt;/code&gt;. This file is used by Docker&#39;s internal virtual machine (VM) and can grow dynamically as more containers and images are created. Over time, even when containers are deleted, &lt;code&gt;Docker.raw&lt;/code&gt; can take up substantial disk space.&lt;/p&gt;

&lt;p&gt;I recently encountered this issue, where my &lt;code&gt;Docker.raw&lt;/code&gt; file showed a size of 60G:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -lh ~/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the actual disk usage was 31G:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ du -sh ~/Library/Containers/com.docker.docker/Data/vms/0/data/Docker.raw&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The discrepancy occurs because &lt;code&gt;Docker.raw&lt;/code&gt; is a sparse file. While it can potentially use 60G, it only occupies 31G of actual disk space.&lt;/p&gt;

&lt;p&gt;To reclaim space, you can clean up unused data with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker system prune&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Space is only freed when images are deleted. Space inside running containers is not automatically reclaimed. To trigger space reclamation, run:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ docker run --privileged --pid=host docker/desktop-reclaim-space&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details, refer to the official Docker documentation: &lt;a href=&quot;https://docs.docker.com/desktop/faqs/macfaqs/&quot;&gt;Docker Desktop FAQs for macOS&lt;/a&gt;.&lt;/p&gt;]]></description>
      <pubDate>Thu, 29 Aug 2024 23:02:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/reclaiming-space-on-macos-from-docker-by-pruning-docker-raw/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/nathan-cima-2JNNpq4nGls-unsplash.jpg" type="image/jpeg" />
      <category>posts, docker, macos, disk space, docker.raw, system maintenance</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Bluesky now has over 10 million users, and I was #56,137!</title>
      <link>https://www.andyjarrett.com/posts/2024/bluesky-now-has-over-10-million-users-and-i-was-number-56137/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/adam-birkett-P2ah-LaV52I-unsplash.jpg&quot; alt=&quot;Developer debugging&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@abrkett?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Adam Birkett&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/white-and-black-light-post-under-blue-sky-P2ah-LaV52I?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-12&quot;&gt;
    &lt;p&gt;Bluesky now has over 10 million users, and I was  &lt;a href=&quot;https://bsky.app/profile/andyjarrett.com&quot;&gt;#56137&lt;/a&gt;!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;row mb-5&quot;&gt;
  &lt;div class=&quot;col-6&quot;&gt;
    &lt;a href=&quot;https://bsky.app/profile/andyjarrett.com&quot;&gt;
      &lt;img src=&quot;https://www.andyjarrett.com/public/img/bluesky-andyjarrett.png&quot; alt=&quot;A virtual certificate with text &#39;Celebrating 10M users on Bluesky, #56,137, Andy Jarrett @andyjarrett.com, joined on May 3, 2023&#39;&quot; class=&quot;img-fluid&quot; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;]]></description>
      <pubDate>Mon, 16 Sep 2024 18:01:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/bluesky-now-has-over-10-million-users-and-i-was-number-56137/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/adam-birkett-P2ah-LaV52I-unsplash.jpg" type="image/jpeg" />
      <category>posts, bluesky, 10million</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Understanding Variable Scoping Differences Between Lucee 5 and Lucee 6</title>
      <link>https://www.andyjarrett.com/posts/2024/understanding-variable-scoping-differences-between-lucee-5-and-lucee-6/</link>
      <description><![CDATA[



&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/lewis-kang-ethe-ngugi-f5pTwLHCsAg-unsplash.jpg&quot; alt=&quot;Computer with code&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;
      Photo by &lt;a href=&quot;https://unsplash.com/@brina_blum?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Brina Blum&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/black-usb-flash-drive-Bb_X4JgSqIM?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;
    &lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;


  &lt;h1 class=&quot;mb-4&quot;&gt;&lt;/h1&gt;
  &lt;p&gt;
    From a conversation on the &lt;a href=&quot;https://workingcode.dev/&quot;&gt;Working Code Podcast&lt;/a&gt; &lt;a href=&quot;https://workingcode.dev/discord/&quot;&gt;Discord&lt;/a&gt; channel I came across
    a change between Lucee 5 to Lucee 6, and how variables are scoped and handled, specifically when/if using &lt;code&gt;var&lt;/code&gt; in a &lt;code&gt;.cfm&lt;/code&gt; template.
    This post is just the sample code I used to do some digging on how the scoping differences between the two versions using a simple test cases to show the different outcomes&lt;/p&gt;

  &lt;h2&gt;Test Scenario&lt;/h2&gt;
  &lt;p&gt;Here are my test files, &lt;code&gt;var.cfm&lt;/code&gt; and &lt;code&gt;varinclude.cfm&lt;/code&gt;.&lt;/p&gt;

  &lt;h3&gt;&lt;code&gt;var.cfm&lt;/code&gt; (main template):&lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;&amp;lt;cfscript&amp;gt;
  var a = &quot;a&quot;;
  b = &quot;b&quot;;
  local.c = &quot;c&quot;;

  dump(a); // Output: &quot;a&quot;
  dump(b); // Output: &quot;b&quot;
  dump(c); // Output: &quot;c&quot;
  dump(local.c); // Output: &quot;c&quot;

  cfinclude(template=&quot;varinclude.cfm&quot;);
&amp;lt;/cfscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

  &lt;h3&gt;&lt;code&gt;varinclude.cfm&lt;/code&gt; (included template):&lt;/h3&gt;
  &lt;pre&gt;&lt;code&gt;&amp;lt;cfscript&amp;gt;
  dump(a); // Output: &quot;a&quot;
  dump(b); // Output: &quot;b&quot;
  dump(c); // Output: &quot;c&quot;
  dump(local.c); // Output: &quot;c&quot;
&amp;lt;/cfscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;This setup works well on &lt;strong&gt;Lucee 5&lt;/strong&gt;, where:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;The &lt;code&gt;var&lt;/code&gt; keyword is used to declare variables with function-local scope, even outside functions.&lt;/li&gt;
    &lt;li&gt;The variable &lt;code&gt;b&lt;/code&gt; is implicitly scoped to the current page.&lt;/li&gt;
    &lt;li&gt;The &lt;code&gt;local&lt;/code&gt; scope is explicitly used for &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;Results on Lucee 5&lt;/h2&gt;
  &lt;p&gt;On Lucee 5, the following outputs occur:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;dump(a);&lt;/code&gt; outputs &lt;code&gt;&quot;a&quot;&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;dump(b);&lt;/code&gt; outputs &lt;code&gt;&quot;b&quot;&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;dump(c);&lt;/code&gt; outputs &lt;code&gt;&quot;c&quot;&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;dump(local.c);&lt;/code&gt; outputs &lt;code&gt;&quot;c&quot;&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;img src=&quot;https://www.andyjarrett.com/public/postimages/understanding-variable-scoping-differences-between-lucee-5-and-lucee-6.img1.png&quot; alt=&quot;Output results&quot; /&gt;

  &lt;p&gt;The included template (&lt;code&gt;varinclude.cfm&lt;/code&gt;) inherits these variables, and everything behaves as expected. This is because, in Lucee 5, &lt;code&gt;var&lt;/code&gt; declarations work even outside of functions.&lt;/p&gt;

  &lt;h2&gt;Behaviour in Lucee 6&lt;/h2&gt;
  &lt;p&gt;When upgrading to &lt;strong&gt;Lucee 6&lt;/strong&gt;, however, some changes in scoping rules cause issues:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;var&lt;/code&gt; outside a function:&lt;/strong&gt;&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;cfscript&amp;gt;
  var a = &quot;a&quot;; // This line fails with &quot;Can&#39;t invoke key A, Local Scope can only be invoked inside a Function&quot;
&amp;lt;/cfscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;In Lucee 6, the &lt;code&gt;var&lt;/code&gt; keyword is now restricted to function scopes, and attempting to use it outside a function will result in an error. This is a notable shift from Lucee 5. &lt;/p&gt;
      &lt;p&gt;&lt;img src=&quot;https://www.andyjarrett.com/public/postimages/understanding-variable-scoping-differences-between-lucee-5-and-lucee-6.img2.png&quot; alt=&quot;Output results&quot; /&gt;&lt;/p&gt;
    &lt;/li&gt;

    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Accessing &lt;code&gt;c&lt;/code&gt; without scoping:&lt;/strong&gt;&lt;/p&gt;
      &lt;pre&gt;&lt;code&gt;&amp;lt;cfscript&amp;gt;
  dump(c); // This line fails with &quot;variable [C] doesn&#39;t exist&quot;
&amp;lt;/cfscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Lucee 6 enforces stricter scoping rules. Without explicitly declaring &lt;code&gt;c&lt;/code&gt; in a shared scope (such as &lt;code&gt;local.c&lt;/code&gt;), it&#39;s no longer accessible in the same way as in Lucee 5.&lt;/p&gt;
      &lt;p&gt; &lt;img src=&quot;https://www.andyjarrett.com/public/postimages/understanding-variable-scoping-differences-between-lucee-5-and-lucee-6.img3.png&quot; alt=&quot;Output results&quot; /&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;



  &lt;h2&gt;TL;DR&lt;/h2&gt;
  &lt;p&gt;When migrating from Lucee 5 to Lucee 6, developers need to be aware of the stricter scoping rules.
    &lt;strong&gt;&lt;code&gt;var&lt;/code&gt; is now restricted to function scope in Lucee 6&lt;/strong&gt;. Attempting to use it outside of a function will result in an error.
  &lt;/p&gt;
]]></description>
      <pubDate>Wed, 09 Oct 2024 08:28:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/understanding-variable-scoping-differences-between-lucee-5-and-lucee-6/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/lewis-kang-ethe-ngugi-f5pTwLHCsAg-unsplash.jpg" type="image/jpeg" />
      <category>posts, CFML, ColdFusion, Lucee</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Connection pools in Node.js with MariaDB</title>
      <link>https://www.andyjarrett.com/posts/2024/connection-pools-in-node-with-mariadb/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/alec-weir-I1vgh8AJr94-unsplash.jpg&quot; alt=&quot;MariaDB optimisation&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@xcvii?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Alec Weir&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/brown-walrus-in-rule-of-thirds-photography-I1vgh8AJr94?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Find the GitHub project here: &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/andyj/mariadb-connection-pool&quot;&gt;github.com/andyj/mariadb-connection-pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;Why Use a Connection Pool?&lt;/h2&gt;

&lt;p&gt;Database connection pooling critical for your web applications. Without a pool, every database query spins up a new connection which startes eating up your resources! A connection pool keeps a stash of open connections ready to go, slashing overhead and boosting performance.&lt;/p&gt;

&lt;p&gt;This also gave me an excuse to go back over some old code of mine and start putting in &lt;a href=&quot;https://www.andyjarrett.com/posts/2024/utility-console-methods-for-debugging-workflow/&quot; title=&quot;Utility Console Methods For Debugging Your Javascript Workflow&quot;&gt;console methods for debugging&lt;/a&gt; that I&#39;ve covered &lt;a href=&quot;https://www.andyjarrett.com/posts/2024/advanced-javascript-console-methods/&quot; title=&quot;Advanced Javascript Console Techniques Every Developer Should Be Aware Of&quot;&gt;recently&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Benefits of Connection Pooling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reduced latency:&lt;/strong&gt; Reusing connections cuts out the time spent establishing new ones.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Better resource management:&lt;/strong&gt; Caps the number of simultaneous connections to keep your database happy.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Improved scalability:&lt;/strong&gt; Handle more users without breaking a sweat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Setting Up a MariaDB Connection Pool in Node.js&lt;/h3&gt;

&lt;p&gt;First things first, you&#39;ll need the &lt;code&gt;mariadb&lt;/code&gt; package. Install it using:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install mariadb dotenv&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s how to set up the pool:&lt;/p&gt;

&lt;h4&gt;Connection Pool Configuration&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
// db.js
require(&#39;dotenv&#39;).config(); // Load environment variables

const mariadb = require(&#39;mariadb&#39;);

const pool = mariadb.createPool({
  host: process.env.DB_HOST,         // Use DB_HOST environment variable from .env
  user: process.env.DB_USER,         // Use DB_USER environment variable from .env
  password: process.env.DB_PASSWORD, // Use DB_PASSWORD environment variable from .env
  database: process.env.DB_NAME,     // Use DB_NAME environment variable from .env
  port: process.env.DB_PORT,         // Use DB_PORT environment variable from .env
  connectionLimit: 10                // Maximum number of connections in the pool
});

module.exports = pool;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a pool with up to 10 connections. Feel free to tweak the &lt;code&gt;connectionLimit&lt;/code&gt; based on what your app needs.&lt;/p&gt;

&lt;h3&gt;Using the Pool in Your Application&lt;/h3&gt;

&lt;p&gt;Let&#39;s look at how to use the connection pool in an Express route. We&#39;ll sprinkle in some advanced console methods to make debugging a breeze.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const express = require(&#39;express&#39;);
const pool = require(&#39;./db&#39;); // Import the pool
const app = express();

app.get(&#39;/data&#39;, async (req, res) =&gt; {
  console.group(&#39;Database Query&#39;);
  console.time(&#39;Query Time&#39;);

  let conn;
  try {
    conn = await pool.getConnection();
    console.assert(conn, &#39;Failed to obtain a database connection&#39;);

    const rows = await conn.query(&#39;SELECT current_timestamp()&#39;);
    console.table(rows);

    res.json(rows);
  } catch (err) {
    console.error(&#39;Error executing query&#39;);
    console.trace(err);
    res.status(500).send(&#39;Database query error&#39;);
  } finally {
    if (conn) conn.release(); // Release the connection back to the pool
    console.timeEnd(&#39;Query Time&#39;);
    console.groupEnd();
  }
});

app.listen(3000, () =&gt; {
  console.log(&#39;Server is running on port 3000&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&#39;s what those console methods are doing for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt;: Groups related log messages, making your console output neater.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;: Measures how long your query takes, helping you spot performance issues.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.assert()&lt;/code&gt;: Checks if you got a connection. If not, it logs an error message.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.table()&lt;/code&gt;: Displays your query results in a nice table format in the console.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;console.trace()&lt;/code&gt;: Prints a stack trace from the point where it&#39;s called, super handy for debugging errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By using these methods, you get a clearer picture of what&#39;s going on under the hood, which is clutch when you&#39;re trying to debug or optimize your app.&lt;/p&gt;

&lt;h3&gt;Best Practices&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Keep an eye on pool usage to tweak &lt;code&gt;connectionLimit&lt;/code&gt; as needed.&lt;/li&gt;
  &lt;li&gt;Use connection timeouts to handle idle or long-running queries.&lt;/li&gt;
  &lt;li&gt;Implement error handling to gracefully manage database hiccups.&lt;/li&gt;
  &lt;li&gt;Leverage advanced console methods to make debugging smoother.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The mariadb package makes it easy to manage database connections efficiently.&lt;/p&gt;

&lt;p&gt;And if you’re using managed database services like AWS RDS for MariaDB or Azure Database for MariaDB, there are additional settings you should consider tweaking for optimal performance:&lt;/p&gt;
&lt;ul&gt;
   &lt;li&gt;&lt;strong&gt;Connection Pool Limits&lt;/strong&gt;: AWS and Azure instances often come with predefined limits on concurrent connections based on the instance size. Make sure your connectionLimit aligns with these constraints to avoid hitting caps that could cause connection errors.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Timeouts and Idle Connections&lt;/strong&gt;: Both AWS and Azure charge for resources tied to active connections. Use settings like idleTimeoutMillis to close unused connections after a certain period. This helps in reducing costs and freeing up database resources.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Max Allowed Packet&lt;/strong&gt;: Tweak this for handling large queries or data sets, especially if your app processes bulk data.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Monitoring and Scaling&lt;/strong&gt;: Both platforms offer native monitoring tools (e.g., Amazon CloudWatch or Azure Monitor) to keep an eye on metrics like CPU usage, connections, and query performance. Use these insights to adjust your pool size dynamically.&lt;/li&gt;
&lt;/ul&gt;

]]></description>
      <pubDate>Tue, 19 Nov 2024 07:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/connection-pools-in-node-with-mariadb/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/alec-weir-I1vgh8AJr94-unsplash.jpg" type="image/jpeg" />
      <category>posts</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>How to Run SVR.JS with Docker Compose</title>
      <link>https://www.andyjarrett.com/posts/2024/how-to-run-svrjs-with-docker-compose/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/florian-olivo-4hbJ-eymZ1o-unsplash.jpg&quot; alt=&quot;Man running towards mountains&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;
      Photo by &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://unsplash.com/@florianolv?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Florian Olivo&lt;/a&gt; on &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://unsplash.com/photos/lines-of-html-codes-4hbJ-eymZ1o?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;
    &lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;



&lt;p&gt;
  &lt;strong&gt;TL;DR:&lt;/strong&gt;
  Project code here: &lt;a href=&quot;https://github.com/andyj/svrjs-with-docker&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;github.com/andyj/svrjs-with-docker&lt;/a&gt;
&lt;/p&gt;


&lt;h1&gt;Why SVR.JS?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://svrjs.org/&quot; rel=&quot;noopener noreferrer&quot;&gt;SVR.JS&lt;/a&gt; is a lightweight and efficient web server designed to serve static files effortlessly. It&#39;s great for scenarios where you need a quick and reliable solution to host static content without the overhead of traditional web servers. &lt;/p&gt;
&lt;p&gt;By combining SVR.JS with Docker, you can eliminate installation dependencies and simplify deployment, making it an ideal choice for developers, testers, and small-scale projects.&lt;/p&gt;

&lt;h2&gt;How to Set It Up&lt;/h2&gt;


&lt;h3&gt;Step 1: Docker Compose Configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &#39;3.9&#39;
services:
  svrjs:
    image: svrjs/svrjs:lts
    container_name: svrjs-server
    platform: linux/amd64
    ports:
      - &quot;8080:80&quot;  # Map port 8080 on host to port 80 in the container
    volumes:
      - ./www:/var/www/svrjs  # Mount the local `www` directory as the web root
      - ./svrjs-config.json:/etc/svrjs-config.json  # Mount custom config
    restart: always
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;docker-compose.yml&lt;/code&gt; file defines the SVR.JS service. It maps port 8080 on the host to port 80 in the container and sets up volumes for the web root and configuration file.&lt;/p&gt;

&lt;h3&gt;Step 2: Configuration File&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;port&quot;: 80,
  &quot;wwwroot&quot;: &quot;/var/www/svrjs&quot;,
  &quot;logging&quot;: {
    &quot;enabled&quot;: true,
    &quot;level&quot;: &quot;info&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this as &lt;code&gt;svrjs-config.json&lt;/code&gt;. It configures SVR.JS to serve files from the specified directory and enables basic logging.&lt;/p&gt;

&lt;h3&gt;Step 3: Directory Structure&lt;/h3&gt;
&lt;p&gt;Create the following directory structure for your project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;svrjs-with-docker
├── README.md
├── docker-compose.yml
├── svrjs-config.json
└── www
    ├── index.html
    └── style.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;www&lt;/code&gt; folder will hold your static files, such as &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;style.css&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Step 4: Example HTML File&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&quot;en&quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
  &amp;lt;title&amp;gt;SVR.JS Test&amp;lt;/title&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Welcome to SVR.JS&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;This static file is served by SVR.JS.&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save this as &lt;code&gt;index.html&lt;/code&gt; inside the &lt;code&gt;www&lt;/code&gt; directory.&lt;/p&gt;

&lt;h3&gt;Step 5: Running the Server&lt;/h3&gt;
&lt;p&gt;In the root directory of your project, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the container starts, visit &lt;a href=&quot;http://localhost:8080/&quot; target=&quot;_blank&quot;&gt;http://localhost:8080&lt;/a&gt; to see your static site in action.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;SVR.JS, combined with Docker, provides a powerful and hassle-free way to serve static content. This setup is highly portable and easy to replicate across different environments, making it a valuable tool for developers of all levels.&lt;/p&gt;



]]></description>
      <pubDate>Tue, 26 Nov 2024 22:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/how-to-run-svrjs-with-docker-compose/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/florian-olivo-4hbJ-eymZ1o-unsplash.jpg" type="image/jpeg" />
      <category>posts, docker, svrjs, tutorial</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Using SVR.js to Run Server-Side JavaScript</title>
      <link>https://www.andyjarrett.com/posts/2024/using-svr-js-to-run-server-side-javascript/</link>
      <description><![CDATA[

&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/photo-of-outer-space.jpeg&quot; alt=&quot;Nasa Space Photo&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://unsplash.com/@nasa?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;NASA&lt;/a&gt; on &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://unsplash.com/photos/photo-of-outer-space-Q1p7bh3SHj8?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Updated project code here: &lt;a rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/andyj/svrjs-with-docker&quot; target=&quot;_blank&quot;&gt;github.com/andyj/svrjs-with-docker&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;How to Use SVR.js to Run Server-Side JavaScript&lt;/h1&gt;

&lt;h2&gt;Building on the Basics&lt;/h2&gt;
&lt;p&gt;In my previous post, &lt;a href=&quot;https://www.andyjarrett.com/posts/2024/how-to-run-svrjs-with-docker-compose/&quot;&gt;How to Run SVR.js with Docker Compose&lt;/a&gt;, I introduced a simple way to set up SVR.js for serving static files using Docker Compose. Since then, I’ve expanded the project to explore server-side capabilities of SVR.js.&lt;/p&gt;
&lt;p&gt;To accommodate this, the project structure has evolved on GitHub, and now includes multiple folders for different setups. Specifically, the new &lt;code&gt;2.serverside-javascript-svrjs&lt;/code&gt; folder demonstrates how to run server-side JavaScript. Let’s dive in!&lt;/p&gt;

&lt;h2&gt;Updated Project Structure&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;svrjs-with-docker/
├── 1. how-to-run-svrjs-with-docker-compose
│   ├── README.md
│   ├── docker-compose.yml
│   ├── svrjs-config.json
│   └── www
│       ├── index.html
│       └── style.css
├── 2.serverside-javascript-svrjs
│   ├── README.md
│   ├── docker-compose.yml
│   ├── server
│   │   └── time.js
│   ├── svrjs-config.json
│   └── www
│       ├── index.html
│       └── style.css
├── LICENSE
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Step 1: The Configuration File&lt;/h2&gt;
&lt;p&gt;The new &lt;code&gt;svrjs-config.json&lt;/code&gt; enables server-side JavaScript by defining a route that maps to a server-side script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
&quot;port&quot;: 80,
&quot;wwwroot&quot;: &quot;/var/www/svrjs&quot;,
&quot;logging&quot;: {
  &quot;enabled&quot;: true,
  &quot;level&quot;: &quot;info&quot;
},
&quot;routes&quot;: {
  &quot;/time&quot;: &quot;../server/time.js&quot;
}
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Step 2: Writing Server-Side Logic&lt;/h2&gt;
&lt;p&gt;Create the &lt;code&gt;time.js&lt;/code&gt; file in the &lt;code&gt;server&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = (req, res) =&gt; {
  const currentTime = new Date().toLocaleString();
  res.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);
  res.end(JSON.stringify({ message: &quot;Hello, World!&quot;, time: currentTime }));
};&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Step 3: Updated Docker Compose Configuration&lt;/h2&gt;
&lt;p&gt;Here’s the &lt;code&gt;docker-compose.yml&lt;/code&gt; file for this setup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;services:
svrjs:
  image: svrjs/svrjs:lts
  container_name: svrjs-server
  platform: linux/amd64
  ports:
    - &quot;8282:80&quot;
  volumes:
    - ./www:/var/www/svrjs
    - ./server:/var/server
    - ./svrjs-config.json:/etc/svrjs-config.json
  restart: always&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Step 4: Running the Server&lt;/h2&gt;
&lt;p&gt;Run the following command from the &lt;code&gt;2.serverside-javascript-svrjs&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker compose up&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the container is running, navigate to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Static Files:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8282/&quot; target=&quot;_blank&quot;&gt;http://localhost:8282&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Server-Side Endpoint:&lt;/strong&gt; &lt;a href=&quot;http://localhost:8282/time&quot; target=&quot;_blank&quot;&gt;http://localhost:8282/time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Testing the Endpoint&lt;/h2&gt;
&lt;p&gt;Visiting &lt;code&gt;/time&lt;/code&gt; in your browser or via a tool like &lt;code&gt;curl&lt;/code&gt; will return a JSON response similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
&quot;message&quot;: &quot;Hello, World!&quot;,
&quot;time&quot;: &quot;28/11/2024, 15:00:00&quot;
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With minimal effort, SVR.js transforms from a static file server into a lightweight tool for handling server-side JavaScript. By leveraging Docker for deployment, this setup is both portable and scalable.&lt;/p&gt;
&lt;p&gt;What server-side features will you build next with SVR.js? Let me know in the comments or contribute to the project on &lt;a href=&quot;https://github.com/andyj/svrjs-with-docker&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
]]></description>
      <pubDate>Fri, 29 Nov 2024 22:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2024/using-svr-js-to-run-server-side-javascript/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/photo-of-outer-space.jpeg" type="image/jpeg" />
      <category>posts, docker, svrjs, tutorial</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Why Updating Alpine.js State with Direct Reassignment Fails (and How to Fix It)</title>
      <link>https://www.andyjarrett.com/posts/2025/why-updating-alpinejs-state-with-direct-reassignme/</link>
      <description><![CDATA[


&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/trevor-wilson--8uTE4FWxkU-unsplash.jpg&quot; alt=&quot;Green mountain under blue sky&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@clevertrevor?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Trevor Wilson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/trees-covered-mountains-during-daytime--8uTE4FWxkU?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;
&lt;div class=&quot;container my-5&quot;&gt;
  &lt;h1 class=&quot;mb-4&quot;&gt;Why Updating Alpine.js State with Direct Reassignment Fails (and How to Fix It)&lt;/h1&gt;

  &lt;p&gt;Reactivity is amazing, but when it fails its frustrating. And with that a stupid issue hit me recently because of direct reassignment of a variable that I did. In my defence I was reassigning the property  &lt;code&gt;this.formFields&lt;/code&gt; after fetching JSON. So, this blog post is here to remind me to check the obvious first.&lt;/p&gt;

  &lt;hr class=&quot;my-4&quot; /&gt;

  &lt;p&gt;I&#39;m going to use &lt;a href=&quot;https://dummyjson.com/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;dummyjson.com&lt;/a&gt; to get some data to explain. Imagine you’re building a product page, and you want to fetch product details from an API and update your form fields dynamically. Here’s a simplified HTML:&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;productForm()&quot; x-init=&quot;fetchProduct()&quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Title: &amp;lt;span x-text=&quot;formFields.title&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Price: &amp;pound;&amp;lt;span x-text=&quot;formFields.price&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Rating: &amp;lt;span x-text=&quot;formFields.rating&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;Stock: &amp;lt;span x-text=&quot;formFields.stock&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Alpine.js component&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function productForm() {
  return {
    formFields: {
      title: &#39;&#39;,
      price: 0,
      rating: 0,
      stock: 0
    },
    async fetchProduct() {
      const response = await fetch(&#39;https://dummyjson.com/products/1&#39;);
      const json = await response.json();

      // Replace formFields but rebind to Alpine
      this.formFields = json;
    }
  };
}&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;The API response:&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;id&quot;: 1,
  &quot;title&quot;: &quot;Essence Mascara Lash Princess&quot;,
  &quot;price&quot;: 9.99,
  &quot;rating&quot;: 4.94,
  &quot;stock&quot;: 5
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;The result:&lt;/strong&gt; The values have not changed, and still showing the default values.&lt;/p&gt;


  &lt;h2&gt;Why This Fails&lt;/h2&gt;
  &lt;p&gt;When you reassign &lt;code&gt;this.formFields&lt;/code&gt; to the new &lt;code&gt;json&lt;/code&gt; object, Alpine.js no longer tracks changes to &lt;code&gt;formFields&lt;/code&gt;. This is because Alpine’s reactivity system is based on proxies, and direct reassignment breaks the connection to the original proxy object.&lt;/p&gt;

  &lt;p&gt;In essence, Alpine.js is still observing the old &lt;code&gt;formFields&lt;/code&gt; object, but you’ve replaced it with a completely new object.&lt;/p&gt;

  &lt;h2&gt;The Fix&lt;/h2&gt;
  &lt;p&gt;Instead of directly reassigning the object, update individual properties of &lt;code&gt;formFields&lt;/code&gt; so that Alpine’s reactivity remains intact:&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async fetchProduct() {
  const response = await fetch(&#39;https://dummyjson.com/products/1&#39;);
  const json = await response.json();

  // Update individual properties
  this.formFields.title = json.title;
  this.formFields.price = json.price;
  this.formFields.rating = json.rating;
  this.formFields.stock = json.stock;
}&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;By updating the properties one by one, Alpine.js can detect and respond to the changes properly.&lt;/p&gt;

  &lt;h2&gt;A Cleaner Approach&lt;/h2&gt;
  &lt;p&gt;If you’re working with multiple properties, you can use &lt;code&gt;Object.assign&lt;/code&gt; to merge the new data into the existing &lt;code&gt;formFields&lt;/code&gt; object:&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async fetchProduct() {
  const response = await fetch(&#39;https://dummyjson.com/products/1&#39;);
  const json = await response.json();

  // Merge new data into formFields
  Object.assign(this.formFields, {
    title: json.title,
    price: json.price,
    rating: json.rating,
    stock: json.stock
  });

  // Or you could do this
  // Object.assign(this.formFields, json);
  // though if the json object contains additional properties that you don’t want in this.formFields, they will also be added.
}&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;This approach avoids keeps the code clean and maintainable.&lt;/p&gt;

  &lt;hr class=&quot;my-4&quot; /&gt;
  &lt;p&gt;Direct reassignment of an object in Alpine.js may seem intuitive, but it can break the reactivity system. By updating individual properties or merging data using &lt;code&gt;Object.assign&lt;/code&gt;, you can ensure your state remains reactive and your UI updates as expected. This small adjustment can save you significant debugging time and (for me) frustration in Alpine.js projects.&lt;/p&gt;
&lt;/div&gt;
]]></description>
      <pubDate>Fri, 10 Jan 2025 17:30:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2025/why-updating-alpinejs-state-with-direct-reassignme/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/trevor-wilson--8uTE4FWxkU-unsplash.jpg" type="image/jpeg" />
      <category>posts, alpinejs, javascript, web development, reactivity, html</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <item>
      <title>Fixing Alpine.js Template Rendering Issues When Your Second Tag Isn&#39;t Showing</title>
      <link>https://www.andyjarrett.com/posts/2025/fixing-alpinejs-template-rendering-issues-when-your-second-tag-isnt-showing/</link>
      <description><![CDATA[
&lt;div class=&quot;image-container my-2&quot;&gt;
  &lt;img src=&quot;https://www.andyjarrett.com/public/blogimage/ales-krivec-7wQsXq_HKJo-unsplash.jpg&quot; alt=&quot;&quot; class=&quot;img-fluid&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;text-end&quot;&gt;
  &lt;sup&gt;
    &lt;cite&gt;Photo by &lt;a href=&quot;https://unsplash.com/@aleskrivec?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Ales Krivec&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/fern-tree-under-white-clouds-7wQsXq_HKJo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Unsplash&lt;/a&gt;&lt;/cite&gt;
  &lt;/sup&gt;
&lt;/div&gt;

&lt;p&gt;When working with Alpine.js templates, I ran into an issue where only the first child element inside a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag is rendered, leaving subsequent elements mysteriously absent.&lt;/p&gt;

&lt;h2&gt;Understanding the Problem&lt;/h2&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-if=&quot;products.product_id&quot;&amp;gt;
  &amp;lt;a :href=&quot;`/products/edit/${products.item_short_ref}/${products.item_code}`&quot; class=&quot;px-2&quot;&amp;gt;
    Edit
  &amp;lt;/a&amp;gt;
  &amp;lt;a :href=&quot;`/products/delete/${products.item_short_ref}/${products.item_code}`&quot; class=&quot;px-2&quot;&amp;gt;
    Delete
  &amp;lt;/a&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might expect both &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to render when the &lt;code&gt;x-if&lt;/code&gt; condition is true. However, Alpine.js requires a single root element inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag. If there are multiple sibling elements, only the first one will appear.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;To resolve this, wrap the content inside the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; in a parent container, such as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. Here’s the corrected code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template x-if=&quot;products.product_id&quot;&amp;gt;
  &amp;lt;span class=&quot;flex&quot;&amp;gt;
    &amp;lt;a :href=&quot;`/products/edit/${products.item_short_ref}/${products.item_code}`&quot; class=&quot;px-2&quot;&amp;gt;
      Edit
    &amp;lt;/a&amp;gt;
    &amp;lt;a :href=&quot;`/products/delete/${products.item_short_ref}/${products.item_code}`&quot; class=&quot;px-2&quot;&amp;gt;
      Delete
    &amp;lt;/a&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; acts as the single root node required by Alpine.js, allowing both &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to render properly.&lt;/p&gt;

&lt;h2&gt;A Demo of the Issue and Solution&lt;/h2&gt;
&lt;p&gt;Here’s a simplified demonstration to illustrate the problem:&lt;/p&gt;

&lt;h3&gt;Code with Issue&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ open: false }&quot;&amp;gt;
  &amp;lt;button x-on:click=&quot;open = !open&quot;&amp;gt;Toggle 1 (shows one link only)&amp;lt;/button&amp;gt;
  &amp;lt;template x-if=&quot;open&quot;&amp;gt;
    &amp;lt;a href=&quot;#&quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;
    &amp;lt;a href=&quot;#&quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, only &quot;Link 1&quot; will appear when you click the button.&lt;/p&gt;

&lt;h3&gt;Corrected Code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div x-data=&quot;{ open: false }&quot;&amp;gt;
  &amp;lt;button x-on:click=&quot;open = !open&quot;&amp;gt;Toggle 2 (shows both links)&amp;lt;/button&amp;gt;
  &amp;lt;template x-if=&quot;open&quot;&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;Link 1&amp;lt;/a&amp;gt;
      &amp;lt;a href=&quot;#&quot;&amp;gt;Link 2&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, both links will render correctly when the button is toggled.&lt;/p&gt;

]]></description>
      <pubDate>Mon, 13 Jan 2025 23:28:00 +0000</pubDate>
      <dc:creator>Andy Jarrett</dc:creator>
      <guid>https://www.andyjarrett.com/posts/2025/fixing-alpinejs-template-rendering-issues-when-your-second-tag-isnt-showing/</guid>
      <enclosure url="https://www.andyjarrett.com/public/blogimage/ales-krivec-7wQsXq_HKJo-unsplash.jpg" type="image/jpeg" />
      <category>posts, javascript, alpinejs, templates, frontend, web development</category>
      <author>Andy Jarrett &lt;email@example.com&gt;</author>
    </item>
    <image>
      <url>https://www.andyjarrett.com/public/img/Andy-Jarrett.com.png</url>
      <title>Andy Jarrett. Code. Develop. Create.</title>
      <link>https://www.andyjarrett.com/</link>
    </image>
  </channel>
</rss>
